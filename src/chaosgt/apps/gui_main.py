# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt6 import QtCore, QtGui, QtWidgets
from ..configs.config_loader import load


class AnalysisUI(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setObjectName("window_main")
        self.resize(1038, 811)
        font = QtGui.QFont()
        font.setBold(False)
        self.setFont(font)
        self.wdt_main = QtWidgets.QWidget(parent=self)
        self.wdt_main.setObjectName("wdt_main")
        self.grid_layout_main = QtWidgets.QGridLayout(self.wdt_main)
        self.grid_layout_main.setObjectName("grid_layout_main")
        self.grp_img = QtWidgets.QGroupBox(parent=self.wdt_main)
        self.grp_img.setObjectName("grp_img")
        self.grid_layout_img = QtWidgets.QGridLayout(self.grp_img)
        self.grid_layout_img.setObjectName("grid_layout_img")
        self.wdt_img = QtWidgets.QWidget(parent=self.grp_img)
        self.wdt_img.setObjectName("wdt_img")
        self.grid_layout_img.addWidget(self.wdt_img, 0, 0, 1, 1)
        self.grp_img_nav = QtWidgets.QGroupBox(parent=self.grp_img)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.grp_img_nav.sizePolicy().hasHeightForWidth())
        self.grp_img_nav.setSizePolicy(size_policy)
        self.grp_img_nav.setTitle("")
        self.grp_img_nav.setFlat(True)
        self.grp_img_nav.setObjectName("grp_img_nav")
        self.grid_layout_img_nav = QtWidgets.QGridLayout(self.grp_img_nav)
        self.grid_layout_img_nav.setObjectName("grid_layout_img_nav")
        self.btn_prev = QtWidgets.QPushButton(parent=self.grp_img_nav)
        self.btn_prev.setEnabled(False)
        self.btn_prev.setObjectName("btn_prev")
        self.grid_layout_img_nav.addWidget(self.btn_prev, 0, 0, 1, 1)
        self.btn_next = QtWidgets.QPushButton(parent=self.grp_img_nav)
        self.btn_next.setEnabled(False)
        self.btn_next.setObjectName("btn_next")
        self.grid_layout_img_nav.addWidget(self.btn_next, 0, 2, 1, 1)
        spacer_item = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.grid_layout_img_nav.addItem(spacer_item, 0, 1, 1, 1)
        self.grid_layout_img.addWidget(self.grp_img_nav, 1, 0, 1, 1)
        self.grid_layout_img.setRowStretch(0, 8)
        self.grid_layout_img.setRowStretch(1, 1)
        self.grid_layout_main.addWidget(self.grp_img, 1, 1, 1, 1)
        self.grp_tasks = QtWidgets.QGroupBox(parent=self.wdt_main)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum,
                                            QtWidgets.QSizePolicy.Policy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.grp_tasks.sizePolicy().hasHeightForWidth())
        self.grp_tasks.setSizePolicy(size_policy)
        self.grp_tasks.setTitle("")
        self.grp_tasks.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignBottom | QtCore.Qt.AlignmentFlag.AlignRight |
            QtCore.Qt.AlignmentFlag.AlignTrailing)
        self.grp_tasks.setFlat(True)
        self.grp_tasks.setObjectName("grp_tasks")
        self.grid_layout_tasks = QtWidgets.QGridLayout(self.grp_tasks)
        self.grid_layout_tasks.setObjectName("grid_layout_tasks")
        self.grp_compute = QtWidgets.QGroupBox(parent=self.grp_tasks)
        self.grp_compute.setObjectName("grp_compute")
        self.grid_layout_compute = QtWidgets.QGridLayout(self.grp_compute)
        self.grid_layout_compute.setObjectName("grid_layout_compute")
        self.btn_chaos_gt = QtWidgets.QPushButton(parent=self.grp_compute)
        self.btn_chaos_gt.setObjectName("btn_chaos_gt")
        self.grid_layout_compute.addWidget(self.btn_chaos_gt, 3, 0, 1, 1)
        self.btn_fd = QtWidgets.QPushButton(parent=self.grp_compute)
        self.btn_fd.setObjectName("btn_fd")
        self.grid_layout_compute.addWidget(self.btn_fd, 2, 0, 1, 1)
        self.btn_gt_metrics = QtWidgets.QPushButton(parent=self.grp_compute)
        self.btn_gt_metrics.setObjectName("btn_gt_metrics")
        self.grid_layout_compute.addWidget(self.btn_gt_metrics, 1, 0, 1, 1)
        self.grid_layout_tasks.addWidget(self.grp_compute, 10, 0, 1, 2)
        self.grp_graph = QtWidgets.QGroupBox(parent=self.grp_tasks)
        self.grp_graph.setObjectName("grp_graph")
        self.grid_layout_graph = QtWidgets.QGridLayout(self.grp_graph)
        self.grid_layout_graph.setObjectName("grid_layout_graph")
        self.btn_show_graph = QtWidgets.QPushButton(parent=self.grp_graph)
        self.btn_show_graph.setObjectName("btn_show_graph")
        self.grid_layout_graph.addWidget(self.btn_show_graph, 0, 0, 1, 1)
        self.btn_save_graph = QtWidgets.QPushButton(parent=self.grp_graph)
        self.btn_save_graph.setObjectName("btn_save_graph")
        self.grid_layout_graph.addWidget(self.btn_save_graph, 3, 0, 1, 1)
        self.btn_quick_graph_metrics = QtWidgets.QPushButton(parent=self.grp_graph)
        self.btn_quick_graph_metrics.setObjectName("btn_quick_graph_metrics")
        self.grid_layout_graph.addWidget(self.btn_quick_graph_metrics, 1, 0, 1, 1)
        self.grid_layout_tasks.addWidget(self.grp_graph, 8, 0, 1, 2)
        spacer_item1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Expanding)
        self.grid_layout_tasks.addItem(spacer_item1, 7, 0, 1, 1)
        self.grp_crop = QtWidgets.QGroupBox(parent=self.grp_tasks)
        self.grp_crop.setObjectName("grp_crop")
        self.grid_layout_crop = QtWidgets.QGridLayout(self.grp_crop)
        self.grid_layout_crop.setObjectName("grid_layout_crop")
        self.btn_crop = QtWidgets.QPushButton(parent=self.grp_crop)
        self.btn_crop.setObjectName("btn_crop")
        self.grid_layout_crop.addWidget(self.btn_crop, 4, 0, 1, 2)
        self.spb_brightness = QtWidgets.QSpinBox(parent=self.grp_crop)
        self.spb_brightness.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.spb_brightness.setMaximum(100)
        self.spb_brightness.setProperty("value", 0)
        self.spb_brightness.setObjectName("spb_brightness")
        self.grid_layout_crop.addWidget(self.spb_brightness, 5, 1, 1, 1)
        self.spb_contrast = QtWidgets.QSpinBox(parent=self.grp_crop)
        self.spb_contrast.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.spb_contrast.setMaximum(100)
        self.spb_contrast.setObjectName("spb_contrast")
        self.grid_layout_crop.addWidget(self.spb_contrast, 6, 1, 1, 1)
        self.lbl_brightness = QtWidgets.QLabel(parent=self.grp_crop)
        self.lbl_brightness.setObjectName("lbl_brightness")
        self.grid_layout_crop.addWidget(self.lbl_brightness, 5, 0, 1, 1)
        self.lbl_contrast = QtWidgets.QLabel(parent=self.grp_crop)
        self.lbl_contrast.setObjectName("lbl_contrast")
        self.grid_layout_crop.addWidget(self.lbl_contrast, 6, 0, 1, 1)
        self.grid_layout_tasks.addWidget(self.grp_crop, 6, 0, 1, 2)
        spacer_item2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Expanding)
        self.grid_layout_tasks.addItem(spacer_item2, 9, 0, 1, 1)
        self.grid_layout_main.addWidget(self.grp_tasks, 1, 2, 1, 1)
        self.grp_path = QtWidgets.QGroupBox(parent=self.wdt_main)
        self.grp_path.setTitle("")
        self.grp_path.setObjectName("grp_path")
        self.grid_layout_path = QtWidgets.QGridLayout(self.grp_path)
        self.grid_layout_path.setObjectName("grid_layout_path")
        self.txt_img_path = QtWidgets.QLineEdit(parent=self.grp_path)
        self.txt_img_path.setObjectName("txt_img_path")
        self.grid_layout_path.addWidget(self.txt_img_path, 1, 1, 1, 1)
        self.lbl_out_path = QtWidgets.QLabel(parent=self.grp_path)
        font = QtGui.QFont()
        font.setBold(True)
        self.lbl_out_path.setFont(font)
        self.lbl_out_path.setObjectName("lbl_out_path")
        self.grid_layout_path.addWidget(self.lbl_out_path, 2, 0, 1, 1)
        self.btn_select_out_path = QtWidgets.QPushButton(parent=self.grp_path)
        self.btn_select_out_path.setObjectName("btn_select_out_path")
        self.grid_layout_path.addWidget(self.btn_select_out_path, 2, 2, 1, 1)
        self.txt_out_path = QtWidgets.QLineEdit(parent=self.grp_path)
        self.txt_out_path.setObjectName("txt_out_path")
        self.grid_layout_path.addWidget(self.txt_out_path, 2, 1, 1, 1)
        self.btn_select_img_path = QtWidgets.QPushButton(parent=self.grp_path)
        self.btn_select_img_path.setObjectName("btn_select_img_path")
        self.grid_layout_path.addWidget(self.btn_select_img_path, 1, 2, 1, 1)
        self.lbl_img_path = QtWidgets.QLabel(parent=self.grp_path)
        font = QtGui.QFont()
        font.setBold(True)
        self.lbl_img_path.setFont(font)
        self.lbl_img_path.setObjectName("lbl_img_path")
        self.grid_layout_path.addWidget(self.lbl_img_path, 1, 0, 1, 1)
        self.cbx_multi = QtWidgets.QCheckBox(parent=self.grp_path)
        font = QtGui.QFont()
        font.setBold(False)
        self.cbx_multi.setFont(font)
        self.cbx_multi.setObjectName("cbx_multi")
        self.grid_layout_path.addWidget(self.cbx_multi, 1, 3, 1, 1)
        self.grid_layout_main.addWidget(self.grp_path, 0, 1, 1, 2)
        self.grp_settings = QtWidgets.QGroupBox(parent=self.wdt_main)
        self.grp_settings.setEnabled(True)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum,
                                            QtWidgets.QSizePolicy.Policy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.grp_settings.sizePolicy().hasHeightForWidth())
        self.grp_settings.setSizePolicy(size_policy)
        self.grp_settings.setFlat(True)
        self.grp_settings.setObjectName("grp_settings")
        self.grid_layout_settings = QtWidgets.QGridLayout(self.grp_settings)
        self.grid_layout_settings.setObjectName("grid_layout_settings")
        self.grp_img_filters = QtWidgets.QGroupBox(parent=self.grp_settings)
        self.grp_img_filters.setObjectName("grp_img_filters")
        self.grid_layout_filters = QtWidgets.QGridLayout(self.grp_img_filters)
        self.grid_layout_filters.setObjectName("grid_layout_filters")
        self.cbx_laplacian = QtWidgets.QCheckBox(parent=self.grp_img_filters)
        self.cbx_laplacian.setObjectName("cbx_laplacian")
        self.grid_layout_filters.addWidget(self.cbx_laplacian, 4, 0, 1, 1)
        self.sld_gaussian = QtWidgets.QSlider(parent=self.grp_img_filters)
        self.sld_gaussian.setMinimum(1)
        self.sld_gaussian.setSingleStep(2)
        self.sld_gaussian.setPageStep(10)
        self.sld_gaussian.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.sld_gaussian.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.sld_gaussian.setObjectName("sld_gaussian")
        self.grid_layout_filters.addWidget(self.sld_gaussian, 1, 1, 1, 1)
        self.sld_lut_gamma = QtWidgets.QSlider(parent=self.grp_img_filters)
        self.sld_lut_gamma.setMinimum(1)
        self.sld_lut_gamma.setMaximum(50)
        self.sld_lut_gamma.setSingleStep(1)
        self.sld_lut_gamma.setPageStep(10)
        self.sld_lut_gamma.setProperty("value", 1)
        self.sld_lut_gamma.setSliderPosition(1)
        self.sld_lut_gamma.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.sld_lut_gamma.setInvertedAppearance(False)
        self.sld_lut_gamma.setInvertedControls(False)
        self.sld_lut_gamma.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.sld_lut_gamma.setTickInterval(0)
        self.sld_lut_gamma.setObjectName("sld_lut_gamma")
        self.grid_layout_filters.addWidget(self.sld_lut_gamma, 0, 1, 1, 1)
        self.lbl_lut_gamma = QtWidgets.QLabel(parent=self.grp_img_filters)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding,
                                            QtWidgets.QSizePolicy.Policy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.lbl_lut_gamma.sizePolicy().hasHeightForWidth())
        self.lbl_lut_gamma.setSizePolicy(size_policy)
        self.lbl_lut_gamma.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_lut_gamma.setObjectName("lbl_lut_gamma")
        self.grid_layout_filters.addWidget(self.lbl_lut_gamma, 0, 2, 1, 1)
        self.cbx_autolevel = QtWidgets.QCheckBox(parent=self.grp_img_filters)
        self.cbx_autolevel.setObjectName("cbx_autolevel")
        self.grid_layout_filters.addWidget(self.cbx_autolevel, 2, 0, 1, 1)
        self.cbx_gaussian_blur = QtWidgets.QCheckBox(parent=self.grp_img_filters)
        self.cbx_gaussian_blur.setObjectName("cbx_gaussian_blur")
        self.grid_layout_filters.addWidget(self.cbx_gaussian_blur, 1, 0, 1, 1)
        self.lbl_lut_gamma_title = QtWidgets.QLabel(parent=self.grp_img_filters)
        self.lbl_lut_gamma_title.setObjectName("lbl_lut_gamma_title")
        self.grid_layout_filters.addWidget(self.lbl_lut_gamma_title, 0, 0, 1, 1)
        self.cbx_scharr = QtWidgets.QCheckBox(parent=self.grp_img_filters)
        self.cbx_scharr.setObjectName("cbx_scharr")
        self.grid_layout_filters.addWidget(self.cbx_scharr, 7, 0, 1, 1)
        self.sld_autolevel = QtWidgets.QSlider(parent=self.grp_img_filters)
        self.sld_autolevel.setMinimum(1)
        self.sld_autolevel.setSingleStep(2)
        self.sld_autolevel.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.sld_autolevel.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.sld_autolevel.setObjectName("sld_autolevel")
        self.grid_layout_filters.addWidget(self.sld_autolevel, 2, 1, 1, 1)
        self.lbl_autolevel = QtWidgets.QLabel(parent=self.grp_img_filters)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding,
                                            QtWidgets.QSizePolicy.Policy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.lbl_autolevel.sizePolicy().hasHeightForWidth())
        self.lbl_autolevel.setSizePolicy(size_policy)
        self.lbl_autolevel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_autolevel.setObjectName("lbl_autolevel")
        self.grid_layout_filters.addWidget(self.lbl_autolevel, 2, 2, 1, 1)
        self.lbl_sobel = QtWidgets.QLabel(parent=self.grp_img_filters)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding,
                                            QtWidgets.QSizePolicy.Policy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.lbl_sobel.sizePolicy().hasHeightForWidth())
        self.lbl_sobel.setSizePolicy(size_policy)
        self.lbl_sobel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_sobel.setObjectName("lbl_sobel")
        self.grid_layout_filters.addWidget(self.lbl_sobel, 5, 2, 1, 1)
        self.sld_laplacian = QtWidgets.QSlider(parent=self.grp_img_filters)
        self.sld_laplacian.setMinimum(1)
        self.sld_laplacian.setMaximum(7)
        self.sld_laplacian.setSingleStep(2)
        self.sld_laplacian.setPageStep(2)
        self.sld_laplacian.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.sld_laplacian.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.sld_laplacian.setObjectName("sld_laplacian")
        self.grid_layout_filters.addWidget(self.sld_laplacian, 4, 1, 1, 1)
        self.sld_sobel = QtWidgets.QSlider(parent=self.grp_img_filters)
        self.sld_sobel.setMinimum(1)
        self.sld_sobel.setMaximum(7)
        self.sld_sobel.setSingleStep(2)
        self.sld_sobel.setPageStep(2)
        self.sld_sobel.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.sld_sobel.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.sld_sobel.setObjectName("sld_sobel")
        self.grid_layout_filters.addWidget(self.sld_sobel, 5, 1, 1, 1)
        self.cbx_sobel = QtWidgets.QCheckBox(parent=self.grp_img_filters)
        self.cbx_sobel.setObjectName("cbx_sobel")
        self.grid_layout_filters.addWidget(self.cbx_sobel, 5, 0, 1, 1)
        self.lbl_gaussian = QtWidgets.QLabel(parent=self.grp_img_filters)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding,
                                            QtWidgets.QSizePolicy.Policy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.lbl_gaussian.sizePolicy().hasHeightForWidth())
        self.lbl_gaussian.setSizePolicy(size_policy)
        self.lbl_gaussian.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_gaussian.setObjectName("lbl_gaussian")
        self.grid_layout_filters.addWidget(self.lbl_gaussian, 1, 2, 1, 1)
        self.lbl_laplacian = QtWidgets.QLabel(parent=self.grp_img_filters)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding,
                                            QtWidgets.QSizePolicy.Policy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.lbl_laplacian.sizePolicy().hasHeightForWidth())
        self.lbl_laplacian.setSizePolicy(size_policy)
        self.lbl_laplacian.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_laplacian.setObjectName("lbl_laplacian")
        self.grid_layout_filters.addWidget(self.lbl_laplacian, 4, 2, 1, 1)
        self.cbx_lowpass = QtWidgets.QCheckBox(parent=self.grp_img_filters)
        self.cbx_lowpass.setObjectName("cbx_lowpass")
        self.grid_layout_filters.addWidget(self.cbx_lowpass, 6, 0, 1, 1)
        self.spn_lowpass = QtWidgets.QSpinBox(parent=self.grp_img_filters)
        self.spn_lowpass.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.spn_lowpass.setObjectName("spn_lowpass")
        self.grid_layout_filters.addWidget(self.spn_lowpass, 6, 1, 1, 2)
        self.grid_layout_filters.setColumnStretch(0, 1)
        self.grid_layout_filters.setColumnStretch(1, 6)
        self.grid_layout_filters.setColumnStretch(2, 1)
        self.grid_layout_settings.addWidget(self.grp_img_filters, 0, 0, 1, 1)
        self.lbl_cite = QtWidgets.QLabel(parent=self.grp_settings)
        self.lbl_cite.setObjectName("lbl_cite")
        self.grid_layout_settings.addWidget(self.lbl_cite, 3, 0, 1, 1)
        self.tree_settings = QtWidgets.QTreeView(parent=self.grp_settings)
        self.tree_settings.setObjectName("tree_settings")
        self.grid_layout_settings.addWidget(self.tree_settings, 2, 0, 1, 1)
        self.grp_img_binary = QtWidgets.QGroupBox(parent=self.grp_settings)
        self.grp_img_binary.setObjectName("grp_img_binary")
        self.grid_layout_binary = QtWidgets.QGridLayout(self.grp_img_binary)
        self.grid_layout_binary.setObjectName("grid_layout_binary")
        self.rdo_otsu_threshold = QtWidgets.QRadioButton(parent=self.grp_img_binary)
        self.rdo_otsu_threshold.setObjectName("rdo_otsu_threshold")
        self.btn_grp_binary = QtWidgets.QButtonGroup(self)
        self.btn_grp_binary.setObjectName("btn_grp_binary")
        self.btn_grp_binary.addButton(self.rdo_otsu_threshold)
        self.grid_layout_binary.addWidget(self.rdo_otsu_threshold, 3, 0, 1, 1)
        self.sld_global_threshold = QtWidgets.QSlider(parent=self.grp_img_binary)
        font = QtGui.QFont()
        font.setBold(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.sld_global_threshold.setFont(font)
        self.sld_global_threshold.setMinimum(1)
        self.sld_global_threshold.setMaximum(255)
        self.sld_global_threshold.setProperty("value", 127)
        self.sld_global_threshold.setTracking(True)
        self.sld_global_threshold.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.sld_global_threshold.setInvertedAppearance(False)
        self.sld_global_threshold.setInvertedControls(False)
        self.sld_global_threshold.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.sld_global_threshold.setObjectName("sld_global_threshold")
        self.grid_layout_binary.addWidget(self.sld_global_threshold, 1, 1, 1, 1)
        self.rdo_adaptive_threshold = QtWidgets.QRadioButton(parent=self.grp_img_binary)
        self.rdo_adaptive_threshold.setObjectName("rdo_adaptive_threshold")
        self.btn_grp_binary.addButton(self.rdo_adaptive_threshold)
        self.grid_layout_binary.addWidget(self.rdo_adaptive_threshold, 2, 0, 1, 1)
        self.rdo_global_threshold = QtWidgets.QRadioButton(parent=self.grp_img_binary)
        self.rdo_global_threshold.setChecked(True)
        self.rdo_global_threshold.setObjectName("rdo_global_threshold")
        self.btn_grp_binary.addButton(self.rdo_global_threshold)
        self.grid_layout_binary.addWidget(self.rdo_global_threshold, 1, 0, 1, 1)
        self.lbl_global_threshold_value = QtWidgets.QLabel(parent=self.grp_img_binary)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding,
                                            QtWidgets.QSizePolicy.Policy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.lbl_global_threshold_value.sizePolicy().hasHeightForWidth())
        self.lbl_global_threshold_value.setSizePolicy(size_policy)
        self.lbl_global_threshold_value.setMinimumSize(QtCore.QSize(0, 0))
        self.lbl_global_threshold_value.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_global_threshold_value.setObjectName("lbl_global_threshold_value")
        self.grid_layout_binary.addWidget(self.lbl_global_threshold_value, 1, 2, 1, 1)
        self.cbx_dark_foreground = QtWidgets.QCheckBox(parent=self.grp_img_binary)
        self.cbx_dark_foreground.setObjectName("cbx_dark_foreground")
        self.grid_layout_binary.addWidget(self.cbx_dark_foreground, 4, 0, 1, 3)
        self.sld_adaptive_threshold = QtWidgets.QSlider(parent=self.grp_img_binary)
        self.sld_adaptive_threshold.setMinimum(1)
        self.sld_adaptive_threshold.setSingleStep(2)
        self.sld_adaptive_threshold.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.sld_adaptive_threshold.setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
        self.sld_adaptive_threshold.setObjectName("sld_adaptive_threshold")
        self.grid_layout_binary.addWidget(self.sld_adaptive_threshold, 2, 1, 1, 1)
        self.lbl_adaptive_threshold_value = QtWidgets.QLabel(parent=self.grp_img_binary)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding,
                                            QtWidgets.QSizePolicy.Policy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.lbl_adaptive_threshold_value.sizePolicy().hasHeightForWidth())
        self.lbl_adaptive_threshold_value.setSizePolicy(size_policy)
        self.lbl_adaptive_threshold_value.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_adaptive_threshold_value.setObjectName("lbl_adaptive_threshold_value")
        self.grid_layout_binary.addWidget(self.lbl_adaptive_threshold_value, 2, 2, 1, 1)
        self.grid_layout_binary.setColumnStretch(0, 1)
        self.grid_layout_binary.setColumnStretch(1, 6)
        self.grid_layout_binary.setColumnStretch(2, 1)
        self.grid_layout_settings.addWidget(self.grp_img_binary, 1, 0, 1, 1)
        self.grid_layout_main.addWidget(self.grp_settings, 0, 0, 2, 1)
        self.grid_layout_main.setColumnStretch(0, 2)
        self.grid_layout_main.setColumnStretch(1, 5)
        self.grid_layout_main.setColumnStretch(2, 1)
        self.setCentralWidget(self.wdt_main)
        self.menu_bar = QtWidgets.QMenuBar(parent=self)
        self.menu_bar.setGeometry(QtCore.QRect(0, 0, 1038, 22))
        self.menu_bar.setObjectName("menu_bar")
        self.setMenuBar(self.menu_bar)
        self.status_bar = QtWidgets.QStatusBar(parent=self)
        self.status_bar.setObjectName("status_bar")
        self.setStatusBar(self.status_bar)

        self.re_translate_ui()
        self.init_tree()
        QtCore.QMetaObject.connectSlotsByName(self)

    def re_translate_ui(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("window_main", "Chaos GT"))
        self.btn_prev.setText(_translate("window_main", "<< previous"))
        self.btn_next.setText(_translate("window_main", "next >>"))
        self.grp_compute.setTitle(_translate("window_main", "Computations"))
        self.btn_chaos_gt.setText(_translate("window_main", "Chaos GT"))
        self.btn_fd.setText(_translate("window_main", " Fractal Dimension "))
        self.btn_gt_metrics.setText(_translate("window_main", "GT Metrics"))
        self.grp_graph.setTitle(_translate("window_main", "Graph Tools"))
        self.btn_show_graph.setText(_translate("window_main", "Show Graph"))
        self.btn_save_graph.setText(_translate("window_main", "Save Graph"))
        self.btn_quick_graph_metrics.setText(_translate("window_main", "Quick Metrics"))
        self.grp_crop.setTitle(_translate("window_main", "Enhancing Tools"))
        self.btn_crop.setText(_translate("window_main", "Crop"))
        self.lbl_brightness.setText(_translate("window_main", "Brightness"))
        self.lbl_contrast.setText(_translate("window_main", "Contrast"))
        self.lbl_out_path.setText(_translate("window_main", "Output Dir"))
        self.btn_select_out_path.setText(_translate("window_main", "Select"))
        self.btn_select_img_path.setText(_translate("window_main", "Select"))
        self.lbl_img_path.setText(_translate("window_main", "Image Path"))
        self.cbx_multi.setText(_translate("window_main", "Multiple Images"))
        self.grp_settings.setTitle(_translate("window_main", "Settings"))
        self.grp_img_filters.setTitle(_translate("window_main", "Image Filters"))
        self.cbx_laplacian.setText(_translate("window_main", "Laplacian"))
        self.lbl_lut_gamma.setText(_translate("window_main", "5"))
        self.cbx_autolevel.setText(_translate("window_main", "Auto Level"))
        self.cbx_gaussian_blur.setText(_translate("window_main", "Gaussian Blur"))
        self.lbl_lut_gamma_title.setText(_translate("window_main", "LUT Gamma"))
        self.cbx_scharr.setText(_translate("window_main", "Scharr"))
        self.lbl_autolevel.setText(_translate("window_main", "10"))
        self.lbl_sobel.setText(_translate("window_main", "3"))
        self.cbx_sobel.setText(_translate("window_main", "Sobel"))
        self.lbl_gaussian.setText(_translate("window_main", "10"))
        self.lbl_laplacian.setText(_translate("window_main", "3"))
        self.cbx_lowpass.setText(_translate("window_main", "Lowpass"))
        self.lbl_cite.setText(_translate("window_main", "Cite our work using ..."))
        self.grp_img_binary.setTitle(_translate("window_main", "Image Binary"))
        self.rdo_otsu_threshold.setText(_translate("window_main", "OTSU"))
        self.rdo_adaptive_threshold.setText(_translate("window_main", "Adaptive"))
        self.rdo_global_threshold.setText(_translate("window_main", "Global"))
        self.lbl_global_threshold_value.setText(_translate("window_main", "120"))
        self.cbx_dark_foreground.setText(_translate("window_main", "Apply Dark Foreground"))
        self.lbl_adaptive_threshold_value.setText(_translate("window_main", "99"))

    def init_tree(self):
        # 1. Fetch configs
        config, options, options_img, options_gte, options_gtc = load()

        # 2. Init treeview
        self.tree_settings.setHeaderHidden(True)
        tree_model = QtGui.QStandardItemModel()
        root_node = tree_model.invisibleRootItem()

        # 3. Add Extraction items
        options_extraction = TreeItem('[Extraction Settings]', 11, set_bold=True, color=QtGui.QColor(0, 0, 255))
        weighted_item = TreeItem('Weighted by Diameter', 9, set_checkable=True,
                                 color=QtGui.QColor(0, 0, 255), data=options_gte.weighted_by_diameter)
        options_extraction.appendRow(weighted_item)

        merge_nearby_item = TreeItem('Merge Nearby Nodes', 9, set_checkable=True,
                                     color=QtGui.QColor(0, 0, 255), data=options_gte.merge_nearby_nodes)
        options_extraction.appendRow(merge_nearby_item)

        prune_dangling_item = TreeItem('Prune Dangling Edges', 9, set_checkable=True,
                                       color=QtGui.QColor(0, 0, 255), data=options_gte.prune_dangling_edges)
        options_extraction.appendRow(prune_dangling_item)

        remove_disconnected_item = TreeItem('Remove Disconnected Segments', 9, set_checkable=True,
                                            color=QtGui.QColor(0, 0, 255),
                                            data=options_gte.remove_disconnected_segments)
        options_extraction.appendRow(remove_disconnected_item)

        remove_loops_item = TreeItem('Remove Self Loops (set size)', 9, set_checkable=True,
                                     color=QtGui.QColor(0, 0, 255), data=options_gte.remove_self_loops)
        options_extraction.appendRow(remove_loops_item)

        remove_size_item = TreeItem(str(options_gte.remove_object_size), 9, set_checkable=False, set_editable=True,
                                    color=QtGui.QColor(0, 0, 255))
        remove_loops_item.appendRow(remove_size_item)

        is_multigraph_item = TreeItem('Is Multigraph?', 9, set_checkable=True,
                                      color=QtGui.QColor(0, 0, 255), data=options_gte.is_multigraph)
        options_extraction.appendRow(is_multigraph_item)

        node_id_item = TreeItem('Display Node ID', 9, set_checkable=True,
                                color=QtGui.QColor(0, 0, 255), data=options_gte.display_node_id)
        options_extraction.appendRow(node_id_item)

        # 4. Add Computation items
        options_compute = TreeItem('[Computation Settings]', 11, set_bold=True, color=QtGui.QColor(255, 0, 0))
        heatmaps_item = TreeItem('Display Heatmaps', 9, set_checkable=True, color=QtGui.QColor(255, 0, 0),
                                 data=options_gtc.display_heatmaps)
        options_compute.appendRow(heatmaps_item)

        degree_item = TreeItem('Average Degree', 9, set_checkable=True, color=QtGui.QColor(255, 0, 0),
                               data=options_gtc.display_degree_histogram)
        options_compute.appendRow(degree_item)

        network_diameter_item = TreeItem('Network Diameter', 9, set_checkable=True,
                                         color=QtGui.QColor(255, 0, 0), data=options_gtc.compute_network_diameter)
        options_compute.appendRow(network_diameter_item)

        anc_item = TreeItem('Average Nodal Connectivity', 9, set_checkable=True,
                            color=QtGui.QColor(255, 0, 0), data=options_gtc.compute_nodal_connectivity)
        options_compute.appendRow(anc_item)

        clustering_coef_item = TreeItem('Average Clustering Coefficient', 9, set_checkable=True,
                                        color=QtGui.QColor(255, 0, 0), data=options_gtc.compute_clustering_coef)
        options_compute.appendRow(clustering_coef_item)

        assortativity_coef_item = TreeItem('Assortativity Coefficient', 9, set_checkable=True,
                                           color=QtGui.QColor(255, 0, 0), data=options_gtc.compute_assortativity_coef)
        options_compute.appendRow(assortativity_coef_item)

        betweenness_centrality_item = TreeItem('Betweenness Centrality', 9, set_checkable=True,
                                               color=QtGui.QColor(255, 0, 0),
                                               data=options_gtc.display_betweenness_histogram)
        options_compute.appendRow(betweenness_centrality_item)

        # current_betweenness_item = TreeItem('Current Flow Betweenness Centrality', 9, set_checkable=True,
        #                                    color=QtGui.QColor(255, 0, 0),
        #                                    data=options_gtc.display_currentflow_histogram)
        # options_compute.appendRow(current_betweenness_item)

        closeness_centrality_item = TreeItem('Closeness Centrality', 9, set_checkable=True,
                                             color=QtGui.QColor(255, 0, 0),
                                             data=options_gtc.display_closeness_histogram)
        options_compute.appendRow(closeness_centrality_item)

        eigenvector_centrality_item = TreeItem('Eigenvector Centrality', 9, set_checkable=True,
                                               color=QtGui.QColor(255, 0, 0),
                                               data=options_gtc.display_eigenvector_histogram)
        options_compute.appendRow(eigenvector_centrality_item)

        graph_density_item = TreeItem('Graph Density', 9, set_checkable=True,
                                      color=QtGui.QColor(255, 0, 0), data=options_gtc.compute_graph_density)
        options_compute.appendRow(graph_density_item)

        graph_conductance_item = TreeItem('Graph Conductance', 9, set_checkable=True,
                                          color=QtGui.QColor(255, 0, 0), data=options_gtc.compute_graph_conductance)
        options_compute.appendRow(graph_conductance_item)

        global_efficiency_item = TreeItem('Global Efficiency', 9, set_checkable=True,
                                          color=QtGui.QColor(255, 0, 0), data=options_gtc.compute_global_efficiency)
        options_compute.appendRow(global_efficiency_item)

        wiener_index_item = TreeItem('Wiener Index', 9, set_checkable=True,
                                     color=QtGui.QColor(255, 0, 0), data=options_gtc.compute_wiener_index)
        options_compute.appendRow(wiener_index_item)

        # 5. Add Save items
        options_save = TreeItem('[Save Files]', 11, set_bold=True, color=QtGui.QColor(99, 99, 99))
        export_gexf_item = TreeItem('Export as gexf', 9, set_checkable=True,
                                    color=QtGui.QColor(99, 99, 99), data=options_gte.export_as_gexf)
        options_save.appendRow(export_gexf_item)

        export_edge_item = TreeItem('Export Edge List', 9, set_checkable=True,
                                    color=QtGui.QColor(99, 99, 99), data=options_gte.export_edge_list)
        options_save.appendRow(export_edge_item)

        # 6. Append all data
        root_node.appendRow(options_extraction)
        root_node.appendRow(options_compute)
        root_node.appendRow(options_save)
        self.tree_settings.setModel(tree_model)

    def init_img_filter_settings(self):
        pass

    def init_img_binary_settings(self):
        pass

    def init_img_path_settings(self):
        pass

    def init_img_enhance_tools(self):
        pass


class TreeItem(QtGui.QStandardItem):

    def __init__(self, text='', font_size=12, set_bold=False, set_checkable=False, set_editable=False,
                 color=QtGui.QColor(0, 0, 0), data=-1):
        super().__init__()

        font = QtGui.QFont()
        font.setPointSize(font_size)
        font.setBold(set_bold)

        self.setEditable(False)
        self.setForeground(color)
        self.setFont(font)
        self.setText(text)
        self.setCheckable(set_checkable)
        self.setEditable(set_editable)
        self.setData(data)

        if int(self.data()) == 1:
            self.setCheckState(QtCore.Qt.CheckState.Checked)
        elif int(self.data()) == 0:
            self.setCheckState(QtCore.Qt.CheckState.Unchecked)


def pyqt_app():
    app = QtWidgets.QApplication(sys.argv)
    analysis_ui = AnalysisUI()
    analysis_ui.show()
    sys.exit(app.exec())
